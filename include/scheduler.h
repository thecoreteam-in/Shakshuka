#ifndef SCHEDULER_H\n#define SCHEDULER_H\n\n#include <vector>\n#include <string>\n#include <ctime>\n\nstruct ScheduledTask {\n    std::string name;\n    std::time_t startTime;\n    std::time_t endTime;\n\n    ScheduledTask(const std::string& name, std::time_t start, std::time_t end)\n        : name(name), startTime(start), endTime(end) {}\n};\n\nclass Scheduler {\npublic:  \n    Scheduler();\n\n    void scheduleTask(const ScheduledTask& task);\n    void rescheduleTask(const std::string& taskName, std::time_t newStart, std::time_t newEnd);\n    void unscheduleTask(const std::string& taskName);\n    std::vector<ScheduledTask> getScheduledTasks() const;\n    std::vector<ScheduledTask> getDayPlan(std::time_t day) const;\n    bool detectOverlaps(const ScheduledTask& newTask) const;\n    std::vector<ScheduledTask> get24HourView() const;\n\nprivate:  \n    std::vector<ScheduledTask> tasks;\n};\n\n#endif // SCHEDULER_H